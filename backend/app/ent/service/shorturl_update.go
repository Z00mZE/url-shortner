// Code generated by entc, DO NOT EDIT.

package service

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Z00mZE/url-shortner/ent/service/predicate"
	"github.com/Z00mZE/url-shortner/ent/service/shorturl"
)

// ShortUrlUpdate is the builder for updating ShortUrl entities.
type ShortUrlUpdate struct {
	config
	hooks    []Hook
	mutation *ShortUrlMutation
}

// Where appends a list predicates to the ShortUrlUpdate builder.
func (suu *ShortUrlUpdate) Where(ps ...predicate.ShortUrl) *ShortUrlUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetURL sets the "url" field.
func (suu *ShortUrlUpdate) SetURL(s string) *ShortUrlUpdate {
	suu.mutation.SetURL(s)
	return suu
}

// SetExpiredAt sets the "expired_at" field.
func (suu *ShortUrlUpdate) SetExpiredAt(t time.Time) *ShortUrlUpdate {
	suu.mutation.SetExpiredAt(t)
	return suu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (suu *ShortUrlUpdate) SetNillableExpiredAt(t *time.Time) *ShortUrlUpdate {
	if t != nil {
		suu.SetExpiredAt(*t)
	}
	return suu
}

// Mutation returns the ShortUrlMutation object of the builder.
func (suu *ShortUrlUpdate) Mutation() *ShortUrlMutation {
	return suu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *ShortUrlUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(suu.hooks) == 0 {
		if err = suu.check(); err != nil {
			return 0, err
		}
		affected, err = suu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShortUrlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suu.check(); err != nil {
				return 0, err
			}
			suu.mutation = mutation
			affected, err = suu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(suu.hooks) - 1; i >= 0; i-- {
			if suu.hooks[i] == nil {
				return 0, fmt.Errorf("service: uninitialized hook (forgotten import service/runtime?)")
			}
			mut = suu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (suu *ShortUrlUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *ShortUrlUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *ShortUrlUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suu *ShortUrlUpdate) check() error {
	if v, ok := suu.mutation.URL(); ok {
		if err := shorturl.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`service: validator failed for field "ShortUrl.url": %w`, err)}
		}
	}
	return nil
}

func (suu *ShortUrlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shorturl.Table,
			Columns: shorturl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shorturl.FieldID,
			},
		},
	}
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shorturl.FieldURL,
		})
	}
	if value, ok := suu.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shorturl.FieldExpiredAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shorturl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ShortUrlUpdateOne is the builder for updating a single ShortUrl entity.
type ShortUrlUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShortUrlMutation
}

// SetURL sets the "url" field.
func (suuo *ShortUrlUpdateOne) SetURL(s string) *ShortUrlUpdateOne {
	suuo.mutation.SetURL(s)
	return suuo
}

// SetExpiredAt sets the "expired_at" field.
func (suuo *ShortUrlUpdateOne) SetExpiredAt(t time.Time) *ShortUrlUpdateOne {
	suuo.mutation.SetExpiredAt(t)
	return suuo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (suuo *ShortUrlUpdateOne) SetNillableExpiredAt(t *time.Time) *ShortUrlUpdateOne {
	if t != nil {
		suuo.SetExpiredAt(*t)
	}
	return suuo
}

// Mutation returns the ShortUrlMutation object of the builder.
func (suuo *ShortUrlUpdateOne) Mutation() *ShortUrlMutation {
	return suuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *ShortUrlUpdateOne) Select(field string, fields ...string) *ShortUrlUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated ShortUrl entity.
func (suuo *ShortUrlUpdateOne) Save(ctx context.Context) (*ShortUrl, error) {
	var (
		err  error
		node *ShortUrl
	)
	if len(suuo.hooks) == 0 {
		if err = suuo.check(); err != nil {
			return nil, err
		}
		node, err = suuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShortUrlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suuo.check(); err != nil {
				return nil, err
			}
			suuo.mutation = mutation
			node, err = suuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suuo.hooks) - 1; i >= 0; i-- {
			if suuo.hooks[i] == nil {
				return nil, fmt.Errorf("service: uninitialized hook (forgotten import service/runtime?)")
			}
			mut = suuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *ShortUrlUpdateOne) SaveX(ctx context.Context) *ShortUrl {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *ShortUrlUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *ShortUrlUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suuo *ShortUrlUpdateOne) check() error {
	if v, ok := suuo.mutation.URL(); ok {
		if err := shorturl.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`service: validator failed for field "ShortUrl.url": %w`, err)}
		}
	}
	return nil
}

func (suuo *ShortUrlUpdateOne) sqlSave(ctx context.Context) (_node *ShortUrl, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shorturl.Table,
			Columns: shorturl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shorturl.FieldID,
			},
		},
	}
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`service: missing "ShortUrl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shorturl.FieldID)
		for _, f := range fields {
			if !shorturl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("service: invalid field %q for query", f)}
			}
			if f != shorturl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shorturl.FieldURL,
		})
	}
	if value, ok := suuo.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shorturl.FieldExpiredAt,
		})
	}
	_node = &ShortUrl{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shorturl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
