// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Z00mZE/url-shortner/ent/urls"
)

// Urls is the model entity for the Urls schema.
type Urls struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt time.Time `json:"expired_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Urls) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case urls.FieldID:
			values[i] = new(sql.NullInt64)
		case urls.FieldURL:
			values[i] = new(sql.NullString)
		case urls.FieldExpiredAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Urls", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Urls fields.
func (u *Urls) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case urls.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case urls.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				u.URL = value.String
			}
		case urls.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				u.ExpiredAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Urls.
// Note that you need to call Urls.Unwrap() before calling this method if this Urls
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Urls) Update() *UrlsUpdateOne {
	return (&UrlsClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the Urls entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Urls) Unwrap() *Urls {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Urls is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Urls) String() string {
	var builder strings.Builder
	builder.WriteString("Urls(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", url=")
	builder.WriteString(u.URL)
	builder.WriteString(", expired_at=")
	builder.WriteString(u.ExpiredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UrlsSlice is a parsable slice of Urls.
type UrlsSlice []*Urls

func (u UrlsSlice) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
